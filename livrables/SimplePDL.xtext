// automatically generated by Xtext
grammar fr.n7.simplepdl.txt.PDL with org.eclipse.xtext.common.Terminals

import "http://simplepdl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Process returns Process:
	{Process}
	'process'
	name=EString
	'{'
		processElement+=ProcessElement*
	'}';

ProcessElement returns ProcessElement:
	WorkDefinition | WorkSequence | Guidance | Ressource;


EString returns ecore::EString:
	STRING | ID;

WorkDefinition returns WorkDefinition:
	{WorkDefinition}
	'wd'
	name=EString
	//('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
	//	('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
	('{'	allocation+=Allocation ( "," allocation+=Allocation)* '}')?;

WorkSequence returns WorkSequence:
	'ws'
	linkType=WorkSequenceType
	'from' predecessor=[WorkDefinition]
	'to' successor=[WorkDefinition]
	;

Guidance returns Guidance:
	{Guidance}
	'note'
	'{'
		('text' text=EString)?
		('elements' '(' elements+=[ProcessElement] ( "," elements+=[ProcessElement])* ')' )?
	'}';

Ressource returns Ressource:
	'ressource'
	name=EString
	count=EInt
	;

Allocation returns Allocation:
	'allocation'
	'{'
		'needed' needed=EInt
		'ressource' ressource=[Ressource]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

enum WorkSequenceType returns WorkSequenceType:
				startToStart = 's2s' | finishToStart = 'f2s' | startToFinish = 's2f' | finishToFinish = 'f2f';









